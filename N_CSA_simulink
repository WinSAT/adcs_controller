function [State_dot, Q_er, w_sat, Voltage, Tau_ap, w_I, Euler, w_speed, sigma_dot] ...
           = N_sim_model(States, qD, wD, Jw, Js, Cg, Ap,t,sigma)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       REACTION WHEEL PARAMETERS                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Ra     = Ap(1);                         % Coil Resistance                 %
Km1    = Ap(2);                         % Motor Constant - Wheel 1        %
Km2    = Ap(3);                         % Motor Constant - Wheel 2        %
Km3    = Ap(4);                         % Motor Constant - Wheel 3        %
Km4    = Ap(5);                         % Motor Constant - Wheel 4        %
dp_x   = Ap(6);                         % Positive Deadzone - Wheel 1     %
dn_x   = Ap(7);                         % Negative Deadzone - Wheel 1     %
dp_y   = Ap(8);                         % Positive Deadzone - Wheel 2     %
dn_y   = Ap(9);                         % Negative Deadzone - Wheel 2     %
dp_z   = Ap(10);                        % Positive Deadzone - Wheel 3     %
dn_z   = Ap(11);                        % Negative Deadzone - Wheel 3     %
dp_o   = Ap(12);                        % Positive Deadzone - Wheel 4     %
dn_o   = Ap(13);                        % Negative Deadzone - Wheel 4     %
V_max  = Ap(14);                        % Wheel - Maximum Voltage         %
wsd    = Ap(15);                                                          %
Km_mat = diag([Km1, Km2, Km3, Km4]);                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     REACTION WHEEL CONFIGURATION                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
alpha  = Ap(16);                             % In-plane angle             %
beta   = Ap(17);                             % Out-of-plane angle         %
cbca   = cos(beta)*cos(alpha);                                            %
cbsa   = cos(beta)*sin(alpha);                                            %
sb     = sin(beta);                                                       %
CASE   = Ap(18);                             % 3-configurations           %
                                                                          %
if CASE == 1                                                              %
    R_dist = [ 1 0 0 0  ;                    % Three orthogonal wheels    %
               0 1 0 0  ;                                                 %
               0 0 1 0 ];                                                 %
elseif CASE == 2                                                          %
    R_dist = [ 1 0 0 -cbca  ;                % Standard four wheels       %
               0 1 0 -cbsa  ;                                             %
               0 0 1  sb   ];                                             %
elseif CASE == 3                                                          %
    R_dist = [ -cbca  -cbca   cbca  cbca  ;  % Pyramid configuration      %
                cbsa  -cbsa  -cbsa  cbsa  ;                               %
                sb     sb     sb    sb   ];                               %
else                                                                      %
    R_dist = [ 1 0 0 0  ;                    % Three orthogonal wheels    %
               0 1 0 0  ;                                                 %
               0 0 1 0 ];                                                 %
end                                                                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            CONTROL GAINS                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
p1     = Cg(1);                                                           %
p2     = Cg(2);                                                           %
p3     = Cg(3);                                                           %
b1     = Cg(4);                                                           %
b2     = Cg(5);                                                           %
k1     = Cg(6);                                                           %
delta  = Cg(7);                                                           %
lambda = Cg(8);                                                           %
thtd2  = Cg(9);                                                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           INTEGRATED STATES                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
q1 = States(1);                                                           %
q2 = States(2);                                                           %
q3 = States(3);                                                           %
q4 = States(4);                                                           %
w  = States(5:7);                                                         %
q  = [q1; q2; q3];                                                        %
w_speed = States(8:11);                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       ESSENTIAL TERMS AND MATRICES                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
q_cross = [  0  -q3   q2  ;                                               %
            q3    0  -q1  ;                                               %
           -q2   q1    0 ];                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                  ROTATION MATRIX - BODY TO ORBITAL                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
R_bo  = (q4^2 - q'*q)*eye(3,3) + 2*(q*q') - 2*q4*q_cross;                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                ANGULAR VELOCITY - ORBITAL TO INERTIAL                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
w_oI = R_bo*[0; -sqrt(thtd2); 0];
%R_bo - BODY TO ORBITAL ROTATION %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 ANGULAR VELOCITY - BODY TO INERTIAL                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
w_I = w + w_oI;                                                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        QUATERNION KINEMATICS                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
q_dot  =  0.5*(q_cross + q4*eye(3,3))*w;
% w is the body frame angularVelocity%
q4_dot = -0.5*transpose(q)*w;                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             DESIRED ATTITUDE                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qd   = [qD(1); qD(2); qD(3)];                                             %
q4d  = qD(4);
% qD is the desired attitude quaternion which was set in the matlab params%
%script file %
                                                                          %
q_e  = q4d*q - q4*qd + cross(q,qd);                                       %
q4_e = q4d*q4 + qd'*q;
%q_e and q4_e are defined as the relative orientation between the body frame B%
% and the desired frame D with orientation of qD = [qd; q4d] %

                                                                          %
qe_c = [  0       -q_e(3)   q_e(2)  ;                                     %
          q_e(3)   0       -q_e(1)  ;                                     %
         -q_e(2)   q_e(1)   0      ];                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                      CONVERSION TO EULER ANGLES                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
roll  = (180/pi)*atan2(R_bo(2,3),R_bo(3,3));                              %
pitch = -(180/pi)*asin(R_bo(1,3));                                        %
yaw   = (180/pi)*atan2(R_bo(1,2),R_bo(1,1));                              %
                                                                          %
Euler = [roll; pitch; yaw];                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                  ROTATION MATRIX - BODY TO DESIRED                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Re_bi = (q4_e^2 - q_e'*q_e)*eye(3,3) + 2*(q_e*q_e') - 2*q4_e*qe_c;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        ANGULAR VELOCITY ERROR                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
w_e   = w - Re_bi*wD;                                                     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            SLIDING PLANE                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Sp = w_e + sign(q4_e)*lambda*q_e;                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                          CONTROL ALGORITHM                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
eta    = p1*norm(w) + p2*norm(q) + p3;                                    %
rho    = sigma*eta;                                                       %
K_t    = 1/(norm(Sp) + delta);                                            %
R_Pin  = R_dist'*inv(R_dist*R_dist');                                     %
U_des  = (k1 + (rho + eta)*K_t)*R_Pin*Sp;                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             ADAPTIVE LAW                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sigma_dot = -b1*sigma + b2*eta*((norm(Sp)^2)/(norm(Sp) + delta));        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             WHEEL VOLTAGE                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Voltage = Ra*inv(Km_mat)*U_des + Km_mat*w_speed;
%% equation (0.19) of the paper for voltage applied to wheels%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%               VOLTAGE DEADZONE LIMITATION (Lower limits)                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if (Voltage(1) <= dp_x)&& (Voltage(1)>0) && (abs(w_speed(1)) < wsd)       %
    Voltage(1) = dp_x;                                                    %
elseif(Voltage(1) >= dn_x) && (Voltage(1)<0) && (abs(w_speed(1)) < wsd)   %
    Voltage(1) = dn_x;                                                    %
end
% dp_x is the Positive Deadzone - Wheel 1
% dn_x is the Negative Deadzone - Wheel 1                                                                   %
if (Voltage(2) <= dp_y) && (Voltage(2)>0) && (abs(w_speed(2)) < wsd)      %
    Voltage(2) = dp_y;                                                    %
elseif(Voltage(2) >= dn_y) && (Voltage(2)<0) && (abs(w_speed(2)) < wsd)   %
    Voltage(2) = dn_y;                                                    %
end
% same convention but for wheel 2 in y axis %
if (Voltage(3) <= dp_z) && (Voltage(3)>0) && (abs(w_speed(3)) < wsd)      %
    Voltage(3) = dp_z;                                                    %
elseif(Voltage(3) >= dn_z) && (Voltage(3)<0) && (abs(w_speed(3)) < wsd)   %
    Voltage(3) = dn_z;                                                    %
end
% same convention but for wheel 3 in z axis%
if (Voltage(4) <= dp_o) && (Voltage(4)>0) && (abs(w_speed(4)) < wsd)      %
    Voltage(4) = dp_o;                                                    %
elseif(Voltage(4) >= dn_o) && (Voltage(4)<0) && (abs(w_speed(4)) < wsd)   %
    Voltage(4) = dn_o;                                                    %
end
%same convention but for wheel 4 (redundant)%
%%% wsd referes to lowest wheel speed which is defined in intial params script%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                VOLTAGE SATURATION LIMITS (Upper bound)                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if (abs(Voltage(1)) > V_max) && (Voltage(1) < 0)                          %
    Voltage(1) = -V_max;                                                  %
elseif (abs(Voltage(1)) > V_max) && (Voltage(1) > 0)                      %
    Voltage(1) = V_max;                                                   %
end
%V_max is given in the inital params script %
if (abs(Voltage(2)) > V_max) && (Voltage(2) < 0)                          %
    Voltage(2) = -V_max;                                                  %
elseif (abs(Voltage(2)) > V_max) && (Voltage(2) > 0)                      %
    Voltage(2) = V_max;                                                   %
end                                                                       %
if (abs(Voltage(3)) > V_max) && (Voltage(3) < 0)                          %
    Voltage(3) = -V_max;                                                  %
elseif (abs(Voltage(3)) > V_max) && (Voltage(3) > 0)                      %
    Voltage(3) = V_max;                                                   %
end                                                                       %
if (abs(Voltage(4)) > V_max) && (Voltage(4) < 0)                          %
    Voltage(4) = -V_max;                                                  %
elseif (abs(Voltage(4)) > V_max) && (Voltage(4) > 0)                      %
    Voltage(4) = V_max;                                                   %
end                                                                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       GRAVITY GRADIENT TORQUE                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GGT  = 3*thtd2*cross(R_bo(:,3),(Js*R_bo(:,3)));
%%% R_bo is the body to orbit transformation matrix %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           APPLIED TORQUE                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Tau_ap = U_des; %(1/Ra)*Km_mat*(Voltage - Km_mat*w_speed);   % Applied Torque     %
Jmat   = Js - R_dist*Jw*R_dist';               % Combined Inertia Matrix  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                         SPACECRAFT DYNAMICS                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
w_0 = sqrt(thtd2)*1000;
EDT = [ 0*4e-6 + 2e-6 * sin(w_0*t);
        0*6e-6 + 3e-6 * sin(w_0*t);
        0*3e-6 + 3e-6 * sin(w_0*t)];
w_dot = cross(w,w_oI) + inv(Jmat)*(-cross(w_I,(Js*w_I+R_dist*Jw*w_speed))...
                                   + GGT + 1*EDT - R_dist*Tau_ap);          %
Ow_dot = inv(Jw)*Tau_ap - R_dist'*(w_dot - cross(w,w_oI));                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        OUTPUT FOR INTEGRATION                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
State_dot = [q_dot; q4_dot; w_dot; Ow_dot];                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Q_er  = [q_e; q4_e];
w_sat = w;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
